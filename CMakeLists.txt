################################################################################
# Main CMake file for ScannedReality Player:
# Software for volumetric video playback

cmake_minimum_required(VERSION 3.17)

set(PROJECT_NAME "ScannedRealityPlayer")

# Make CMake find any Find<Package>.cmake files in the cmake subdirectory
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

# This variable makes it easier to share include()d snippets among different
# projects (this project, the separate Android and Quest projects, etc.)
set(SCAN_STUDIO_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR})

project(${PROJECT_NAME} LANGUAGES C CXX)

include(CMakeDependentOption)
include(CTest)
include(ExternalProject)


################################################################################
# Set common C++ build settings

# Set the C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
set(CMAKE_CXX_EXTENSIONS OFF)

# Find includes in corresponding build directories.
# This is necessary to find files generated by shaderbind.
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# Make libraries on Windows easier to use:
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)

# Set sane basic compile options, used commonly for all targets:
if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  set(COMMON_OPTIONS
    $<$<COMPILE_LANGUAGE:CXX>:/MP>        # Multi-processor compilation
    $<$<COMPILE_LANGUAGE:CXX>:/utf-8>
    $<$<COMPILE_LANGUAGE:CUDA>:-Xcompiler=/utf-8>
    $<$<COMPILE_LANGUAGE:CXX>:/bigobj>
    $<$<COMPILE_LANGUAGE:CUDA>:-Xcompiler /bigobj>
    $<$<COMPILE_LANGUAGE:CXX>:/Zi>                # Debug Information Format: Program Database (for crash reporting)
    $<$<COMPILE_LANGUAGE:CUDA>:-Xcompiler=/Zi>    # Debug Information Format: Program Database (for crash reporting)
    $<$<COMPILE_LANGUAGE:CXX>:/DEBUG>             # Generate Debug Info: Yes (for crash reporting)
    $<$<COMPILE_LANGUAGE:CUDA>:-Xcompiler /DEBUG> # Generate Debug Info: Yes (for crash reporting)
    "$<$<COMPILE_LANGUAGE:CXX>:/wd4201>"  # nonstandard extension used: nameless struct/union - occurs in glm (as a dependency of gli)
    "$<$<COMPILE_LANGUAGE:CXX>:/wd4305>"  # 'argument': truncation from 'double' to '(const) float' - very rarely an actual issue
    "$<$<COMPILE_LANGUAGE:CXX>:/wd4458>"  # "declaration of 'variable' hides class member" - we use that often on purpose e.g., in constructors, explicitly prefixing the class member with "this->" if needed.
    "$<$<COMPILE_LANGUAGE:CXX>:/wd4505>"  # 'function': unreferenced function with internal linkage has been removed - happens in stb_truetype.h
    "$<$<COMPILE_LANGUAGE:CXX>:/wd4820>"  # 'x' bytes padding added after data member 'y' - happens everywhere, leading to excessive warning spam
  )
else()
  set(COMMON_OPTIONS
    $<$<COMPILE_LANGUAGE:CXX,CUDA>:-Wall>
    $<$<COMPILE_LANGUAGE:CXX>:-Werror=return-type>     # treat "control reaches end of non-void function" as an error, not a warning
    "$<$<COMPILE_LANGUAGE:CXX>:-Wno-class-memaccess>"  # "memset clearing an object with no trivial copy assignment" and similar, occurring for Eigen objects
  )
endif()

# We generally use CMake's RelWithDebInfo build type for performant debugging.
# Because of this, we want to enable a couple of low-overhead debug checks in this build type (and in Debug builds) that we don't enable in Release mode.
# But as far as I am aware, there is no preprocessor define to check for the RelWithDebInfo build type by default
# (`NDEBUG` is defined for both Release, RelWithDebInfo, and MinSizeRel).
# Thus, we create a define here for both the Debug and RelWithDebInfo modes, named `DEB_INFO_BUILD`.
set(COMMON_OPTIONS ${COMMON_OPTIONS} $<$<OR:$<CONFIG:RelWithDebInfo>,$<CONFIG:Debug>>:-DDEB_INFO_BUILD>)

# For MSVC, improve the binary output paths:
# Output all .dll and .exe files in a single directory such that it is easy
# to run them without needing to manually copy the .dll files to the .exe files.
if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  set (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/$<CONFIG>)
  set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/$<CONFIG>)
endif()


################################################################################
# External dependencies

find_package(OpenGL)


################################################################################
# Packaged Dependencies

# Eigen3
# add_subdirectory(third_party/eigen)
set(EIGEN3_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/third_party/libvis/third_party/eigen)

# libvis_io
add_subdirectory(third_party/libvis/src/libvis/io third_party/libvis_io)

# loguru
include(cmake/dependency_loguru.cmake)

# yaml-cpp
# Override the default of yaml-cpp's YAML_CPP_BUILD_CONTRIB and YAML_CPP_BUILD_TOOLS options to OFF,
# and the default of YAML_BUILD_SHARED_LIBS to OFF.
set(YAML_CPP_BUILD_CONTRIB OFF CACHE INTERNAL "Enable yaml-cpp contrib in library")
set(YAML_CPP_BUILD_TOOLS OFF CACHE INTERNAL "Enable parse tools")
set(YAML_BUILD_SHARED_LIBS OFF CACHE INTERNAL "Build yaml-cpp shared library")
add_subdirectory(third_party/libvis/third_party/yaml-cpp)

# SDL2 (for render window creation and input handling)
# Always use static linking to reduce possible headaches with shared library distribution for the viewer.
if (EMSCRIPTEN)
  option(SDL_PTHREADS "Use POSIX threads for multi-threading" true)
endif()
set(SDL_SHARED false CACHE BOOL "Build a shared version of the library")
set(SDL_STATIC true CACHE BOOL "Build a static version of the library")
cmake_dependent_option(SDL_STATIC_PIC "Static version of the library should be built with Position Independent Code" ON "SDL_STATIC" ON)
add_subdirectory(third_party/SDL2)

# Dav1d (for AV.1 decoding in the viewer apps)
include(cmake/dependency_dav1d.cmake)

# zstd (for data (de)compression)
# Override the default of zstd's ZSTD_BUILD_PROGRAMS option to OFF
option(ZSTD_BUILD_PROGRAMS "BUILD PROGRAMS" OFF)
# Always use static linking.
# In general, it removes possible headaches with shared library distribution,
# and emscripten anyway supports static linking only.
option(ZSTD_BUILD_STATIC "BUILD STATIC LIBRARIES" ON)
option(ZSTD_BUILD_SHARED "BUILD SHARED LIBRARIES" OFF)
# Do not build zstd tests
set(ZSTD_BUILD_TESTS_default OFF)
option(ZSTD_BUILD_TESTS "BUILD TESTS" OFF)
add_subdirectory(third_party/zstd/build/cmake)


################################################################################
# Viewer targets

# ScanStudioViewer for the web (both 'app' and JavaScript library versions)
include(cmake/exe_viewer_web.cmake)


################################################################################
# Feature summary

include(FeatureSummary)
feature_summary(WHAT ALL)
