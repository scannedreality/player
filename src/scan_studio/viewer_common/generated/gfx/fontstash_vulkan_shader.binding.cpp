// This file was autogenerated by shaderbind. Do not modify.

#include "fontstash_vulkan_shader.binding.hpp"

#include <libvis/vulkan/device.h>

using namespace vis;

namespace fontstash_vulkan_shader {

bool CreateDescriptorSet0Layout(VulkanDescriptorSetLayout* layout, const VulkanDevice& device, const DescriptorSet0Config* config) {
  layout->AddBinding(0, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, 1, VK_SHADER_STAGE_FRAGMENT_BIT, config ? config->fontTextureImmutableSamplers : nullptr);
  
  return layout->Initialize(device);
}

void DescriptorSet0::Update(
      const VkDescriptorImageInfo* fontTexture) {
  VkWriteDescriptorSet writeDescriptorSet[1];
  writeDescriptorSet[0] = VkWriteDescriptorSet{};
  writeDescriptorSet[0].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
  writeDescriptorSet[0].descriptorType = descriptor_types_[0];
  writeDescriptorSet[0].descriptorCount = 1;
  writeDescriptorSet[0].dstSet = descriptor_set_;
  writeDescriptorSet[0].dstBinding = 0;
  writeDescriptorSet[0].pImageInfo = fontTexture;
  logical_device_->Api().vkUpdateDescriptorSets(*logical_device_, 1, writeDescriptorSet, 0, nullptr);
}

void DescriptorSet0::UpdateFontTexture(
      const VkDescriptorImageInfo* fontTexture) {
  VkWriteDescriptorSet writeDescriptorSet[1];
  writeDescriptorSet[0] = VkWriteDescriptorSet{};
  writeDescriptorSet[0].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
  writeDescriptorSet[0].descriptorType = descriptor_types_[0];
  writeDescriptorSet[0].descriptorCount = 1;
  writeDescriptorSet[0].dstSet = descriptor_set_;
  writeDescriptorSet[0].dstBinding = 0;
  writeDescriptorSet[0].pImageInfo = fontTexture;
  logical_device_->Api().vkUpdateDescriptorSets(*logical_device_, 1, writeDescriptorSet, 0, nullptr);
}

bool CreateDescriptorSet1Layout(VulkanDescriptorSetLayout* layout, const VulkanDevice& device, const DescriptorSet1Config* config) {
  layout->AddBinding(0, (config && config->PerFrameUBODynamic) ? VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC : VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, 1, VK_SHADER_STAGE_VERTEX_BIT);
  
  return layout->Initialize(device);
}

void DescriptorSet1::Update(
      const VkDescriptorBufferInfo* PerFrameUBO) {
  VkWriteDescriptorSet writeDescriptorSet[1];
  writeDescriptorSet[0] = VkWriteDescriptorSet{};
  writeDescriptorSet[0].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
  writeDescriptorSet[0].descriptorType = descriptor_types_[0];
  writeDescriptorSet[0].descriptorCount = 1;
  writeDescriptorSet[0].dstSet = descriptor_set_;
  writeDescriptorSet[0].dstBinding = 0;
  writeDescriptorSet[0].pBufferInfo = PerFrameUBO;
  logical_device_->Api().vkUpdateDescriptorSets(*logical_device_, 1, writeDescriptorSet, 0, nullptr);
}

void DescriptorSet1::UpdatePerFrameUBO(
      const VkDescriptorBufferInfo* PerFrameUBO) {
  VkWriteDescriptorSet writeDescriptorSet[1];
  writeDescriptorSet[0] = VkWriteDescriptorSet{};
  writeDescriptorSet[0].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
  writeDescriptorSet[0].descriptorType = descriptor_types_[0];
  writeDescriptorSet[0].descriptorCount = 1;
  writeDescriptorSet[0].dstSet = descriptor_set_;
  writeDescriptorSet[0].dstBinding = 0;
  writeDescriptorSet[0].pBufferInfo = PerFrameUBO;
  logical_device_->Api().vkUpdateDescriptorSets(*logical_device_, 1, writeDescriptorSet, 0, nullptr);
}

}
