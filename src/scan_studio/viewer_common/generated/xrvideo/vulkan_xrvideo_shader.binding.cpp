// This file was autogenerated by shaderbind. Do not modify.

#include "vulkan_xrvideo_shader.binding.hpp"

#include <libvis/vulkan/device.h>

using namespace vis;

namespace vulkan_xrvideo_shader {

bool CreateDescriptorSet0Layout(VulkanDescriptorSetLayout* layout, const VulkanDevice& device, const DescriptorSet0Config* config) {
  layout->AddBinding(0, (config && config->VertexUBODynamic) ? VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC : VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, 1, VK_SHADER_STAGE_VERTEX_BIT);
  layout->AddBinding(1, (config && config->DeformationStateStorageBufferDynamic) ? VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC : VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, 1, VK_SHADER_STAGE_VERTEX_BIT);
  layout->AddBinding(2, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, 1, VK_SHADER_STAGE_FRAGMENT_BIT, config ? config->textureLumaImmutableSamplers : nullptr);
  layout->AddBinding(3, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, 1, VK_SHADER_STAGE_FRAGMENT_BIT, config ? config->textureChromaUImmutableSamplers : nullptr);
  layout->AddBinding(4, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, 1, VK_SHADER_STAGE_FRAGMENT_BIT, config ? config->textureChromaVImmutableSamplers : nullptr);
  
  return layout->Initialize(device);
}

void DescriptorSet0::Update(
      const VkDescriptorBufferInfo* VertexUBO,
      const VkDescriptorBufferInfo* DeformationStateStorageBuffer,
      const VkDescriptorImageInfo* textureLuma,
      const VkDescriptorImageInfo* textureChromaU,
      const VkDescriptorImageInfo* textureChromaV) {
  VkWriteDescriptorSet writeDescriptorSet[5];
  writeDescriptorSet[0] = VkWriteDescriptorSet{};
  writeDescriptorSet[0].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
  writeDescriptorSet[0].descriptorType = descriptor_types_[0];
  writeDescriptorSet[0].descriptorCount = 1;
  writeDescriptorSet[0].dstSet = descriptor_set_;
  writeDescriptorSet[0].dstBinding = 0;
  writeDescriptorSet[0].pBufferInfo = VertexUBO;
  writeDescriptorSet[1] = VkWriteDescriptorSet{};
  writeDescriptorSet[1].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
  writeDescriptorSet[1].descriptorType = descriptor_types_[1];
  writeDescriptorSet[1].descriptorCount = 1;
  writeDescriptorSet[1].dstSet = descriptor_set_;
  writeDescriptorSet[1].dstBinding = 1;
  writeDescriptorSet[1].pBufferInfo = DeformationStateStorageBuffer;
  writeDescriptorSet[2] = VkWriteDescriptorSet{};
  writeDescriptorSet[2].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
  writeDescriptorSet[2].descriptorType = descriptor_types_[2];
  writeDescriptorSet[2].descriptorCount = 1;
  writeDescriptorSet[2].dstSet = descriptor_set_;
  writeDescriptorSet[2].dstBinding = 2;
  writeDescriptorSet[2].pImageInfo = textureLuma;
  writeDescriptorSet[3] = VkWriteDescriptorSet{};
  writeDescriptorSet[3].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
  writeDescriptorSet[3].descriptorType = descriptor_types_[3];
  writeDescriptorSet[3].descriptorCount = 1;
  writeDescriptorSet[3].dstSet = descriptor_set_;
  writeDescriptorSet[3].dstBinding = 3;
  writeDescriptorSet[3].pImageInfo = textureChromaU;
  writeDescriptorSet[4] = VkWriteDescriptorSet{};
  writeDescriptorSet[4].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
  writeDescriptorSet[4].descriptorType = descriptor_types_[4];
  writeDescriptorSet[4].descriptorCount = 1;
  writeDescriptorSet[4].dstSet = descriptor_set_;
  writeDescriptorSet[4].dstBinding = 4;
  writeDescriptorSet[4].pImageInfo = textureChromaV;
  logical_device_->Api().vkUpdateDescriptorSets(*logical_device_, 5, writeDescriptorSet, 0, nullptr);
}

void DescriptorSet0::UpdateVertexUBO(
      const VkDescriptorBufferInfo* VertexUBO) {
  VkWriteDescriptorSet writeDescriptorSet[1];
  writeDescriptorSet[0] = VkWriteDescriptorSet{};
  writeDescriptorSet[0].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
  writeDescriptorSet[0].descriptorType = descriptor_types_[0];
  writeDescriptorSet[0].descriptorCount = 1;
  writeDescriptorSet[0].dstSet = descriptor_set_;
  writeDescriptorSet[0].dstBinding = 0;
  writeDescriptorSet[0].pBufferInfo = VertexUBO;
  logical_device_->Api().vkUpdateDescriptorSets(*logical_device_, 1, writeDescriptorSet, 0, nullptr);
}

void DescriptorSet0::UpdateDeformationStateStorageBuffer(
      const VkDescriptorBufferInfo* DeformationStateStorageBuffer) {
  VkWriteDescriptorSet writeDescriptorSet[1];
  writeDescriptorSet[0] = VkWriteDescriptorSet{};
  writeDescriptorSet[0].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
  writeDescriptorSet[0].descriptorType = descriptor_types_[1];
  writeDescriptorSet[0].descriptorCount = 1;
  writeDescriptorSet[0].dstSet = descriptor_set_;
  writeDescriptorSet[0].dstBinding = 1;
  writeDescriptorSet[0].pBufferInfo = DeformationStateStorageBuffer;
  logical_device_->Api().vkUpdateDescriptorSets(*logical_device_, 1, writeDescriptorSet, 0, nullptr);
}

void DescriptorSet0::UpdateTextureLuma(
      const VkDescriptorImageInfo* textureLuma) {
  VkWriteDescriptorSet writeDescriptorSet[1];
  writeDescriptorSet[0] = VkWriteDescriptorSet{};
  writeDescriptorSet[0].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
  writeDescriptorSet[0].descriptorType = descriptor_types_[2];
  writeDescriptorSet[0].descriptorCount = 1;
  writeDescriptorSet[0].dstSet = descriptor_set_;
  writeDescriptorSet[0].dstBinding = 2;
  writeDescriptorSet[0].pImageInfo = textureLuma;
  logical_device_->Api().vkUpdateDescriptorSets(*logical_device_, 1, writeDescriptorSet, 0, nullptr);
}

void DescriptorSet0::UpdateTextureChromaU(
      const VkDescriptorImageInfo* textureChromaU) {
  VkWriteDescriptorSet writeDescriptorSet[1];
  writeDescriptorSet[0] = VkWriteDescriptorSet{};
  writeDescriptorSet[0].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
  writeDescriptorSet[0].descriptorType = descriptor_types_[3];
  writeDescriptorSet[0].descriptorCount = 1;
  writeDescriptorSet[0].dstSet = descriptor_set_;
  writeDescriptorSet[0].dstBinding = 3;
  writeDescriptorSet[0].pImageInfo = textureChromaU;
  logical_device_->Api().vkUpdateDescriptorSets(*logical_device_, 1, writeDescriptorSet, 0, nullptr);
}

void DescriptorSet0::UpdateTextureChromaV(
      const VkDescriptorImageInfo* textureChromaV) {
  VkWriteDescriptorSet writeDescriptorSet[1];
  writeDescriptorSet[0] = VkWriteDescriptorSet{};
  writeDescriptorSet[0].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
  writeDescriptorSet[0].descriptorType = descriptor_types_[4];
  writeDescriptorSet[0].descriptorCount = 1;
  writeDescriptorSet[0].dstSet = descriptor_set_;
  writeDescriptorSet[0].dstBinding = 4;
  writeDescriptorSet[0].pImageInfo = textureChromaV;
  logical_device_->Api().vkUpdateDescriptorSets(*logical_device_, 1, writeDescriptorSet, 0, nullptr);
}

}
